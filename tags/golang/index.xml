<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on roc</title>
    <link>http://imroc.io/tags/golang/</link>
    <description>Recent content in Golang on roc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 06 Sep 2017 15:35:18 +0800</lastBuildDate>
    
	<atom:link href="http://imroc.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go语言(golang)包设计哲学-原则与项目结构组织最佳实践</title>
      <link>http://imroc.io/post/golang/go%E8%AF%AD%E8%A8%80golang%E5%8C%85%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6-%E5%8E%9F%E5%88%99%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E7%BB%84%E7%BB%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 06 Sep 2017 15:35:18 +0800</pubDate>
      
      <guid>http://imroc.io/post/golang/go%E8%AF%AD%E8%A8%80golang%E5%8C%85%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6-%E5%8E%9F%E5%88%99%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E7%BB%84%E7%BB%87%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>总结下Go的package设计哲学 明确目的 在准备设计一个包之前，我们需要明确它的目的。 包的命名就必须明确体现其目的，而不仅仅是为了存放代码。</description>
    </item>
    
    <item>
      <title>Go语言技巧-使用for range time.Tick()固定间隔时间执行</title>
      <link>http://imroc.io/post/golang/go%E8%AF%AD%E8%A8%80%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8for-range-time-tick%E5%9B%BA%E5%AE%9A%E9%97%B4%E9%9A%94%E6%97%B6%E9%97%B4%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Wed, 06 Sep 2017 15:35:18 +0800</pubDate>
      
      <guid>http://imroc.io/post/golang/go%E8%AF%AD%E8%A8%80%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8for-range-time-tick%E5%9B%BA%E5%AE%9A%E9%97%B4%E9%9A%94%E6%97%B6%E9%97%B4%E6%89%A7%E8%A1%8C/</guid>
      <description>直接上代码: for range time.Tick(30 * time.Millisecond) { doSomthing() } 因为time.Tick()返回的是一个channel,每隔指定的时间会有数据从channel中出来，for ran</description>
    </item>
    
    <item>
      <title>Go语言技巧-使用select{}阻塞main函数</title>
      <link>http://imroc.io/post/golang/go%E8%AF%AD%E8%A8%80%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8select%E9%98%BB%E5%A1%9Emain%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 06 Sep 2017 15:35:18 +0800</pubDate>
      
      <guid>http://imroc.io/post/golang/go%E8%AF%AD%E8%A8%80%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8select%E9%98%BB%E5%A1%9Emain%E5%87%BD%E6%95%B0/</guid>
      <description>很多时候我们需要让main函数不退出，让它在后台一直执行，例如： func main() { for i := 0; i &amp;lt; 20; i++ { //启动20个协程处理消息队列中的消息 c := consumer.New() go c.Start() } select</description>
    </item>
    
    <item>
      <title>golang中append函数返回值必须有变量接收的原因探究</title>
      <link>http://imroc.io/post/golang/golanggo%E8%AF%AD%E8%A8%80%E4%B8%ADappend%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%BF%85%E9%A1%BB%E6%9C%89%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%A9%B6/</link>
      <pubDate>Wed, 06 Sep 2017 15:35:18 +0800</pubDate>
      
      <guid>http://imroc.io/post/golang/golanggo%E8%AF%AD%E8%A8%80%E4%B8%ADappend%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%BF%85%E9%A1%BB%E6%9C%89%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%A9%B6/</guid>
      <description>append函数返回更新后的slice（长度和容量可能会变），必须重新用slice的变量接收，不然无法编译通过 为了弄明白为什么，首先我们需要</description>
    </item>
    
  </channel>
</rss>